#!/usr/bin/env python3
"""
Visualize the actual LangGraph using built-in visualization capabilities.
Generates images and browser views of the real graph structure.
"""

import os
import sys
from pathlib import Path

def visualize_with_mermaid():
    """Use LangGraph's built-in Mermaid visualization"""
    try:
        # Import your actual graph
        from graph import build_graph
        
        # Build the graph
        graph = build_graph()
        
        print("üé® Generating LangGraph Mermaid visualization...")
        
        # Get Mermaid representation
        mermaid_code = graph.get_graph().draw_mermaid()
        
        # Save to file
        with open('langgraph_mermaid.mmd', 'w') as f:
            f.write(mermaid_code)
        
        print("‚úÖ Generated: langgraph_mermaid.mmd")
        print("   This is your actual LangGraph structure!")
        
        # Also create an enhanced HTML viewer
        html_content = f'''<!DOCTYPE html>
<html>
<head>
    <title>AI Textbook Processor - LangGraph Visualization</title>
    <script src="https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.min.js"></script>
    <style>
        body {{ 
            font-family: Arial, sans-serif; 
            margin: 0; 
            padding: 20px; 
            background: #f5f5f5; 
        }}
        .container {{ 
            max-width: 1200px; 
            margin: 0 auto; 
            background: white; 
            padding: 30px; 
            border-radius: 10px; 
            box-shadow: 0 4px 20px rgba(0,0,0,0.1); 
        }}
        .header {{ 
            text-align: center; 
            margin-bottom: 30px; 
            color: #333; 
        }}
        .mermaid {{ 
            text-align: center; 
            background: white; 
            padding: 20px; 
            border-radius: 8px; 
            border: 1px solid #ddd; 
        }}
        .info {{ 
            margin-top: 20px; 
            padding: 15px; 
            background: #e3f2fd; 
            border-radius: 5px; 
            border-left: 4px solid #2196f3; 
        }}
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>ü§ñ AI Textbook Processor</h1>
            <h2>LangGraph Workflow Visualization</h2>
            <p>This is your actual graph structure generated by LangGraph</p>
        </div>
        
        <div class="mermaid">
{mermaid_code}
        </div>
        
        <div class="info">
            <h3>üìã Graph Information</h3>
            <p><strong>Nodes:</strong> {len(graph.get_graph().nodes)}</p>
            <p><strong>Edges:</strong> {len(graph.get_graph().edges)}</p>
            <p><strong>Entry Point:</strong> comprehensive_validation</p>
            <p><strong>Generated:</strong> Using LangGraph's built-in visualization</p>
        </div>
    </div>
    
    <script>
        mermaid.initialize({{ 
            startOnLoad: true,
            theme: 'default',
            flowchart: {{
                useMaxWidth: true,
                htmlLabels: true
            }}
        }});
    </script>
</body>
</html>'''
        
        with open('langgraph_visualization.html', 'w') as f:
            f.write(html_content)
        
        print("‚úÖ Generated: langgraph_visualization.html")
        print("   Open this in your browser to see the interactive graph!")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error generating Mermaid visualization: {e}")
        return False

def visualize_with_png():
    """Generate PNG image of the graph"""
    try:
        from graph import build_graph
        
        # Build the graph
        graph = build_graph()
        
        print("üñºÔ∏è  Generating PNG image...")
        
        # Try to generate PNG
        try:
            png_data = graph.get_graph().draw_mermaid_png()
            
            with open('langgraph.png', 'wb') as f:
                f.write(png_data)
            
            print("‚úÖ Generated: langgraph.png")
            print("   High-quality PNG image of your actual graph!")
            return True
            
        except Exception as png_error:
            print(f"‚ö†Ô∏è  PNG generation failed: {png_error}")
            print("üí° You might need to install: npm install -g @mermaid-js/mermaid-cli")
            return False
            
    except Exception as e:
        print(f"‚ùå Error: {e}")
        return False

def create_ascii_representation():
    """Create ASCII representation of the graph"""
    try:
        from graph import build_graph
        
        graph = build_graph()
        graph_obj = graph.get_graph()
        
        print("üìù Creating ASCII representation...")
        
        ascii_graph = f'''
AI TEXTBOOK PROCESSOR - LANGGRAPH STRUCTURE
==========================================

NODES ({len(graph_obj.nodes)}):
{chr(10).join([f"  ‚Ä¢ {node}" for node in graph_obj.nodes])}

EDGES ({len(graph_obj.edges)}):
{chr(10).join([f"  ‚Ä¢ {edge[0]} ‚Üí {edge[1]}" for edge in graph_obj.edges])}

FLOW STRUCTURE:
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ    comprehensive_       ‚îÇ ‚óÑ‚îÄ‚îÄ ENTRY POINT
‚îÇ      validation         ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
           ‚îÇ        ‚îÇ
    (continue)   (failed)
           ‚îÇ        ‚îÇ
           ‚ñº        ‚ñº
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê  END
‚îÇ normalize_      ‚îÇ
‚îÇ   content       ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
           ‚îÇ
           ‚ñº
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ generate_all_       ‚îÇ
‚îÇ    content          ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
           ‚îÇ
           ‚ñº
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ format_output   ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
           ‚îÇ
           ‚ñº
         END

VALIDATION LOGIC:
‚Ä¢ Grade Level Check
‚Ä¢ Safety Analysis  
‚Ä¢ Relevance Check

CONTENT GENERATION:
‚Ä¢ Study Notes
‚Ä¢ Fill-in-Blanks
‚Ä¢ Match Following
‚Ä¢ Q&A Section
'''
        
        with open('langgraph_ascii.txt', 'w') as f:
            f.write(ascii_graph)
        
        print("‚úÖ Generated: langgraph_ascii.txt")
        print("   ASCII representation of your graph structure")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error creating ASCII: {e}")
        return False

def open_in_browser():
    """Try to open the HTML visualization in browser"""
    try:
        import webbrowser
        
        html_path = Path('langgraph_visualization.html').absolute()
        
        if html_path.exists():
            webbrowser.open(f'file://{html_path}')
            print("üåê Opening visualization in your default browser...")
            return True
        else:
            print("‚ùå HTML file not found. Generate it first.")
            return False
            
    except Exception as e:
        print(f"‚ùå Error opening browser: {e}")
        return False

if __name__ == "__main__":
    print("üéØ LangGraph Visualization Generator")
    print("=" * 50)
    
    success_count = 0
    
    # Try different visualization methods
    print("\n1Ô∏è‚É£ Generating Mermaid visualization...")
    if visualize_with_mermaid():
        success_count += 1
    
    print("\n2Ô∏è‚É£ Generating PNG image...")
    if visualize_with_png():
        success_count += 1
    
    print("\n3Ô∏è‚É£ Creating ASCII representation...")
    if create_ascii_representation():
        success_count += 1
    
    print("\n" + "=" * 50)
    print(f"üìä Generated {success_count}/3 visualizations")
    
    if success_count > 0:
        print("\nüìã Available Files:")
        files = [
            ('langgraph_mermaid.mmd', 'Mermaid diagram file'),
            ('langgraph_visualization.html', 'Interactive HTML viewer'),
            ('langgraph.png', 'PNG image'),
            ('langgraph_ascii.txt', 'ASCII text representation')
        ]
        
        for filename, description in files:
            if Path(filename).exists():
                print(f"   ‚úÖ {filename} - {description}")
        
        print("\nüåê To view in browser:")
        print("   python -c \"import webbrowser; webbrowser.open('langgraph_visualization.html')\"")
        print("   Or just double-click langgraph_visualization.html")
        
        print("\nüí° Usage Tips:")
        print("   ‚Ä¢ Use .mmd file with https://mermaid.live/")
        print("   ‚Ä¢ Open .html file for interactive view")
        print("   ‚Ä¢ Use .png for presentations")
        print("   ‚Ä¢ View .txt for simple structure")
    
    print("\nüöÄ Your actual LangGraph is now visualized!") 